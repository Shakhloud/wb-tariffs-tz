import { google, sheets_v4 } from "googleapis";
import { DatabaseService } from "./databaseService.js";
import env from "#config/env/env.js";

export class GoogleSheetsService {
    private sheets: sheets_v4.Sheets;
    private databaseService: DatabaseService;

    constructor() {
        this.databaseService = new DatabaseService();
        this.sheets = this.initializeSheets();
    }

    private initializeSheets(): sheets_v4.Sheets {
        try {
            const auth = new google.auth.JWT({
                email: env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
                key: env.GOOGLE_PRIVATE_KEY,
                scopes: ["https://www.googleapis.com/auth/spreadsheets"],
            });

            return google.sheets({ version: "v4", auth });
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API:", error);
            throw error;
        }
    }

    async updateSheet(sheetId: string, tariffsData: any[]): Promise<void> {
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ${sheetId}...`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const sortedData = await this.databaseService.getFullDataForGoogleSheetsWithSorting(
                new Date(),
                "storage", // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ box_storage_coef_expr
            );

            if (!sortedData || sortedData.length === 0) {
                console.log(`üì≠ –ù–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${sheetId}`);
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
            const spreadsheet = await this.sheets.spreadsheets.get({
                spreadsheetId: sheetId,
            });

            const sheets = spreadsheet.data.sheets || [];

            // –ò—â–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Data" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
            // –ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å
            const dataSheetName = "stocks_coefs";
            const targetSheet = sheets.find((sheet) => sheet.properties?.title === dataSheetName);

            // –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if (!targetSheet) {
                console.log(`üìÑ –õ–∏—Å—Ç "${dataSheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...`);

                await this.sheets.spreadsheets.batchUpdate({
                    spreadsheetId: sheetId,
                    requestBody: {
                        requests: [
                            {
                                addSheet: {
                                    properties: {
                                        title: dataSheetName,
                                        gridProperties: {
                                            rowCount: 1000,
                                            columnCount: 20,
                                        },
                                    },
                                },
                            },
                        ],
                    },
                });

                console.log(`‚úÖ –õ–∏—Å—Ç "${dataSheetName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            const headers = Object.keys(sortedData[0]);
            const rows = sortedData.map((item) => Object.values(item));
            const values = [headers, ...rows];

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç –¥–∞–Ω–Ω—ã–º–∏
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: sheetId,
                range: `${dataSheetName}!A1`,
                valueInputOption: "RAW",
                requestBody: {
                    values: values,
                },
            });

            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${sheetId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ${sortedData.length} –∑–∞–ø–∏—Å—è–º–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ box_storage_coef_expr)`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${sheetId}:`, error);
            throw error;
        }
    }

    /** –û—á–∏—â–∞–µ—Ç –ª–∏—Å—Ç stocks_coefs –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ */
    private async clearSheet(sheetId: string): Promise<void> {
        try {
            await this.sheets.spreadsheets.values.clear({
                spreadsheetId: sheetId,
                range: "stocks_coefs",
            });
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–∏—Å—Ç–∞ stocks_coefs:`, error);
            throw error;
        }
    }
}
